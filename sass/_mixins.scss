@mixin responsive_padding_margins() {
  @each $breakpoint_prefix, $breakpoint_min_width in $breakpoints {
    @if $breakpoint_prefix == 'xs' {
      @include generate-padding-margin-classes($breakpoint_prefix)
    } @else {
      @media screen and (min-width: $breakpoint_min_width) {
        @include generate-padding-margin-classes($breakpoint_prefix)
      }
    }
  }
}

@mixin generate-padding-margin-classes($breakpoint_prefix) {
  @each $spacing in $spacings {
    @each $prefix, $property in $margins_and_paddings {
      .#{$prefix}-#{$breakpoint_prefix}-a-#{$spacing} {
        #{$property}: $spacing * $spacer !important;
      }
      .#{$prefix}-#{$breakpoint_prefix}-t-#{$spacing} {
        #{$property}-top: $spacing * $spacer !important;
      }
      .#{$prefix}-#{$breakpoint_prefix}-r-#{$spacing} {
        #{$property}-right: $spacing * $spacer !important;
      }
      .#{$prefix}-#{$breakpoint_prefix}-b-#{$spacing} {
        #{$property}-bottom: $spacing * $spacer !important;
      }
      .#{$prefix}-#{$breakpoint_prefix}-l-#{$spacing} {
        #{$property}-left: $spacing * $spacer !important;
      }
      .#{$prefix}-#{$breakpoint_prefix}-x-#{$spacing} {
        #{$property}-left: $spacing * $spacer !important;
        #{$property}-right: $spacing * $spacer !important;
      }
      .#{$prefix}-#{$breakpoint_prefix}-y-#{$spacing} {
        #{$property}-top: $spacing * $spacer !important;
        #{$property}-bottom: $spacing * $spacer !important;
      }
    }
  }
}
